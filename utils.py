# -*- coding: utf-8 -*-
"""utils.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Tajx4dSiNvChA1aeMutgjIvNDhxmWyYO
"""

import numpy as np
from os.path import isfile
import requests
import progressbar
import time
import pickle

import requests
import numpy as np
import progressbar
import pickle
import time
from os.path import isfile

def get_data(file_name):
    '''
    Fetches the file from the location, loads it into memory and returns the data.
    '''
    if not isfile(file_name):
        url = f"https://ussf-ssac-23-soccer-gnn.s3.us-east-2.amazonaws.com/public/counterattack/{file_name}"
        
        r = requests.get(url, stream=True)
        # Fancy code to print progress bar
        block_size = 1024
        n_chunk = 1000
        file_size = int(r.headers.get('Content-Length', None))
        num_bars = np.ceil(file_size / (n_chunk * block_size))
        bar =  progressbar.ProgressBar(maxval=num_bars).start()
        with open(file_name, 'wb') as f:
            for i, chunk in enumerate(r.iter_content(chunk_size=n_chunk * block_size)):
                f.write(chunk)
                bar.update(i+1)
                # Add a little sleep so you can see the bar progress
                time.sleep(0.05)
      
    with open(file_name, 'rb') as handle:
        data = pickle.load(handle)
    return data

def filter_features(edge_feature_idxs, node_feature_idxs, adj_matrix, data, gender=None):
    """
    gender: either None, 'm' or 'w'. Use m/w when trying out gender-aware model, this will add an extra node_feature
    the node feature will be 0 (m) and 1 (f). This is only relevent after loading both the M and W datasets (not implemented atm)
    """

    # Check for empty edge features or node features.
    if not any(edge_feature_idxs) and not any(node_feature_idxs):
        print("\nCannot have zero edge features and zero node features.\n")
        print("\nDefaulting to the previous configuration.")
    else:
        if not gender:
            data[adj_matrix]['normal_e'] = [x[:, edge_feature_idxs] for x in data[adj_matrix]['e']]
            data[adj_matrix]['normal_x'] = [x[:, node_feature_idxs] for x in data[adj_matrix]['x']]
        elif gender == 'm':
            data[adj_matrix]['normal_e'] = [x[:, edge_feature_idxs] for x in data[adj_matrix]['e']]
            data[adj_matrix]['normal_x'] = [np.append(
                x[:, node_feature_idxs],
                np.zeros(shape=(x.shape[0], 1)), axis=1
            ) for x in data[adj_matrix]['x']]
        elif gender == 'w':
            data[adj_matrix]['normal_e'] = [x[:, edge_feature_idxs] for x in data[adj_matrix]['e']]
            data[adj_matrix]['normal_x'] = [np.append(
                x[:, node_feature_idxs],
                np.ones(shape=(x.shape[0], 1)), axis=1
            ) for x in data[adj_matrix]['x']]
        else:
            raise NotImplementedError()

    return data