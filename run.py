# -*- coding: utf-8 -*-
"""run.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VQSbNQzOYsiXwm9HWGFUAQiOnuBhr85E
"""

import argparse
import model_and_train
import utils
import evaluation
import matplotlib.pyplot as plt

def main(args):
    dataset = args.dataset
    og_data = utils.get_data(dataset)

    edge_feature = args.edge_feature
    node_feature = args.node_feature
    matrix_type = args.matrix_type
    model_type = args.model
    data_flt = utils.filter_features(edge_feature, node_feature, matrix_type, og_data.copy())

    learning_rate = args.learning_rate
    epochs = args.epochs
    batch_size = args.batch_size
    channels = args.channels
    layers = args.layers

    loader_tr, loader_te, model = model_and_train.create_and_train_model(data_flt, matrix_type, model_type, learning_rate, epochs, batch_size, channels, layers)

    auc_result = evaluation.roc_auc(loader_te, model)
    print(f'ROC AUC Result: {auc_result}')

    # Capture the ECE result and print it
    ece_result = evaluation.ece(data_flt, matrix_type, model)
    print(f'ECE Result: {ece_result}')

    # Optionally, save the plots to files
    plt.savefig('roc_curve.png')
    plt.savefig('calibration_curve.png')

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Run model training and evaluation.')
    parser.add_argument('--model', type=str, default='GNN', help='Model to use.')
    parser.add_argument('--dataset', type=str, default='combined', help='Dataset to train the model.')
    parser.add_argument('--edge_feature', type=int, nargs='+', default=[0, 1, 2, 3, 4, 5], help='List of edge features.')
    parser.add_argument('--node_feature', type=int, nargs='+', default=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], help='List of node features.')
    parser.add_argument('--matrix_type', type=str, default='normal', help='Type of matrix to use.')
    parser.add_argument('--learning_rate', type=float, default=5e-5, help='Initial learning rate.')
    parser.add_argument('--epochs', type=int, default=300, help='Number of epochs to train.')
    parser.add_argument('--batch_size', type=int, default=16, help='Batch size for training.')
    parser.add_argument('--channels', type=int, default=128, help='Number of channels.')
    parser.add_argument('--layers', type=int, default=3, help='Number of layers.')

    args = parser.parse_args()
    main(args)